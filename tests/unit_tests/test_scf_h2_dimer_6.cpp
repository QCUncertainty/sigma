#ifdef ENABLE_EIGEN_SUPPORT

#include "testing.hpp"
#include <Eigen/Dense>
#include <iomanip>
#include <sigma/sigma.hpp>
#include <unsupported/Eigen/CXX11/Tensor>

/* Model SCF for He dimer
 * Geom
 * H 0.0 0.0 0.0
 * H 0.0 0.0 1.39839
 * H 0.0 0.0 6.39839
 * H 0.0 0.0 7.79678
 *
 */

using uncertain_t = sigma::UDouble;
using value_t     = typename uncertain_t::value_t;
using scalar_t    = Eigen::Tensor<uncertain_t, 0>;
using vector_t    = Eigen::Tensor<uncertain_t, 1>;
using matrix_t    = Eigen::Tensor<uncertain_t, 2>;
using tensor3_t   = Eigen::Tensor<uncertain_t, 3>;
using tensor4_t   = Eigen::Tensor<uncertain_t, 4>;
using index_t     = Eigen::IndexPair<int>;

constexpr auto rmajor = Eigen::RowMajor;
constexpr auto edynam = Eigen::Dynamic;
using eig_mat_t       = Eigen::Matrix<uncertain_t, edynam, edynam, rmajor>;
using map_t           = Eigen::Map<const eig_mat_t>;

static double error_v = 1e-6;

// These are all pre-generated integral values from Libint2
namespace h2_dimer_6 {
matrix_t get_s() {
    matrix_t s(4, 4);
    s.setConstant(uncertain_t(0.0, error_v));
    s(0, 0) = s(0, 0) + 1.0000000000000000;
    s(0, 1) = s(0, 1) + 0.6598756603017041;
    s(0, 2) = s(0, 2) + 0.0078188246323727;
    s(0, 3) = s(0, 3) + 0.0012785149277090;
    s(1, 0) = s(1, 0) + 0.6598756603017041;
    s(1, 1) = s(1, 1) + 1.0000000000000000;
    s(1, 2) = s(1, 2) + 0.0374700482112389;
    s(1, 3) = s(1, 3) + 0.0078188246323727;
    s(2, 0) = s(2, 0) + 0.0078188246323727;
    s(2, 1) = s(2, 1) + 0.0374700482112389;
    s(2, 2) = s(2, 2) + 1.0000000000000000;
    s(2, 3) = s(2, 3) + 0.6598756603017041;
    s(3, 0) = s(3, 0) + 0.0012785149277090;
    s(3, 1) = s(3, 1) + 0.0078188246323727;
    s(3, 2) = s(3, 2) + 0.6598756603017041;
    s(3, 3) = s(3, 3) + 1.0000000000000000;
    return s;
}

matrix_t get_t() {
    matrix_t t(4, 4);
    t.setConstant(uncertain_t(0.0, error_v));
    t(0, 0) = t(0, 0) + 0.7600318799223887;
    t(0, 1) = t(0, 1) + 0.2369625819355766;
    t(0, 2) = t(0, 2) + -0.0037533663859623;
    t(0, 3) = t(0, 3) + -0.0009127484420239;
    t(1, 0) = t(1, 0) + 0.2369625819355766;
    t(1, 1) = t(1, 1) + 0.7600318799223887;
    t(1, 2) = t(1, 2) + -0.0096457758162273;
    t(1, 3) = t(1, 3) + -0.0037533663859623;
    t(2, 0) = t(2, 0) + -0.0037533663859623;
    t(2, 1) = t(2, 1) + -0.0096457758162273;
    t(2, 2) = t(2, 2) + 0.7600318799223887;
    t(2, 3) = t(2, 3) + 0.2369625819355765;
    t(3, 0) = t(3, 0) + -0.0009127484420239;
    t(3, 1) = t(3, 1) + -0.0037533663859623;
    t(3, 2) = t(3, 2) + 0.2369625819355766;
    t(3, 3) = t(3, 3) + 0.7600318799223887;
    return t;
}

matrix_t get_v() {
    matrix_t v(4, 4);
    v.setConstant(uncertain_t(0.0, error_v));
    v(0, 0) = v(0, 0) + -2.1655412453322720;
    v(0, 1) = v(0, 1) + -1.4056210024040821;
    v(0, 2) = v(0, 2) + -0.0110654052942160;
    v(0, 3) = v(0, 3) + -0.0017131718189902;
    v(1, 0) = v(1, 0) + -1.4056210024040821;
    v(1, 1) = v(1, 1) + -2.2372815996937341;
    v(1, 2) = v(1, 2) + -0.0534177437566483;
    v(1, 3) = v(1, 3) + -0.0110654052942160;
    v(2, 0) = v(2, 0) + -0.0110654052942160;
    v(2, 1) = v(2, 1) + -0.0534177437566483;
    v(2, 2) = v(2, 2) + -2.2372815996937336;
    v(2, 3) = v(2, 3) + -1.4056210024040818;
    v(3, 0) = v(3, 0) + -0.0017131718189902;
    v(3, 1) = v(3, 1) + -0.0110654052942160;
    v(3, 2) = v(3, 2) + -1.4056210024040816;
    v(3, 3) = v(3, 3) + -2.1655412453322715;
    return v;
}

tensor4_t get_eri4() {
    tensor4_t eri4(4, 4, 4, 4);
    eri4.setConstant(uncertain_t(0.0, error_v));
    eri4(0, 0, 0, 0) = eri4(0, 0, 0, 0) + 0.7746059442114875;
    eri4(0, 0, 0, 1) = eri4(0, 0, 0, 1) + 0.4445933369312845;
    eri4(0, 0, 0, 2) = eri4(0, 0, 0, 2) + 0.0023940339210324;
    eri4(0, 0, 0, 3) = eri4(0, 0, 0, 3) + 0.0001228030875960;
    eri4(0, 0, 1, 0) = eri4(0, 0, 1, 0) + 0.4445933369312845;
    eri4(0, 0, 1, 1) = eri4(0, 0, 1, 1) + 0.5699963425235068;
    eri4(0, 0, 1, 2) = eri4(0, 0, 1, 2) + 0.0100402760349429;
    eri4(0, 0, 1, 3) = eri4(0, 0, 1, 3) + 0.0016765852908689;
    eri4(0, 0, 2, 0) = eri4(0, 0, 2, 0) + 0.0023940339210324;
    eri4(0, 0, 2, 1) = eri4(0, 0, 2, 1) + 0.0100402760349429;
    eri4(0, 0, 2, 2) = eri4(0, 0, 2, 2) + 0.1562877998880217;
    eri4(0, 0, 2, 3) = eri4(0, 0, 2, 3) + 0.0931495514242862;
    eri4(0, 0, 3, 0) = eri4(0, 0, 3, 0) + 0.0001228030875960;
    eri4(0, 0, 3, 1) = eri4(0, 0, 3, 1) + 0.0016765852908689;
    eri4(0, 0, 3, 2) = eri4(0, 0, 3, 2) + 0.0931495514242861;
    eri4(0, 0, 3, 3) = eri4(0, 0, 3, 3) + 0.1282580446942662;
    eri4(0, 1, 0, 0) = eri4(0, 1, 0, 0) + 0.4445933369312846;
    eri4(0, 1, 0, 1) = eri4(0, 1, 0, 1) + 0.2975931246062183;
    eri4(0, 1, 0, 2) = eri4(0, 1, 0, 2) + 0.0018510224765508;
    eri4(0, 1, 0, 3) = eri4(0, 1, 0, 3) + 0.0000688934885519;
    eri4(0, 1, 1, 0) = eri4(0, 1, 1, 0) + 0.2975931246062183;
    eri4(0, 1, 1, 1) = eri4(0, 1, 1, 1) + 0.4445933369312846;
    eri4(0, 1, 1, 2) = eri4(0, 1, 1, 2) + 0.0080081059388164;
    eri4(0, 1, 1, 3) = eri4(0, 1, 1, 3) + 0.0012926692420310;
    eri4(0, 1, 2, 0) = eri4(0, 1, 2, 0) + 0.0018510224765508;
    eri4(0, 1, 2, 1) = eri4(0, 1, 2, 1) + 0.0080081059388164;
    eri4(0, 1, 2, 2) = eri4(0, 1, 2, 2) + 0.1161200862985245;
    eri4(0, 1, 2, 3) = eri4(0, 1, 2, 3) + 0.0683758445986394;
    eri4(0, 1, 3, 0) = eri4(0, 1, 3, 0) + 0.0000688934885519;
    eri4(0, 1, 3, 1) = eri4(0, 1, 3, 1) + 0.0012926692420310;
    eri4(0, 1, 3, 2) = eri4(0, 1, 3, 2) + 0.0683758445986394;
    eri4(0, 1, 3, 3) = eri4(0, 1, 3, 3) + 0.0931495514242861;
    eri4(0, 2, 0, 0) = eri4(0, 2, 0, 0) + 0.0023940339210324;
    eri4(0, 2, 0, 1) = eri4(0, 2, 0, 1) + 0.0018510224765508;
    eri4(0, 2, 0, 2) = eri4(0, 2, 0, 2) + 0.0000000000000000;
    eri4(0, 2, 0, 3) = eri4(0, 2, 0, 3) + 0.0000000000000000;
    eri4(0, 2, 1, 0) = eri4(0, 2, 1, 0) + 0.0018510224765508;
    eri4(0, 2, 1, 1) = eri4(0, 2, 1, 1) + 0.0033811957847676;
    eri4(0, 2, 1, 2) = eri4(0, 2, 1, 2) + 0.0000000000000000;
    eri4(0, 2, 1, 3) = eri4(0, 2, 1, 3) + 0.0000000000000000;
    eri4(0, 2, 2, 0) = eri4(0, 2, 2, 0) + 0.0000000000000000;
    eri4(0, 2, 2, 1) = eri4(0, 2, 2, 1) + 0.0000000000000000;
    eri4(0, 2, 2, 2) = eri4(0, 2, 2, 2) + 0.0023940339210324;
    eri4(0, 2, 2, 3) = eri4(0, 2, 2, 3) + 0.0012926692420310;
    eri4(0, 2, 3, 0) = eri4(0, 2, 3, 0) + 0.0000000000000000;
    eri4(0, 2, 3, 1) = eri4(0, 2, 3, 1) + 0.0000000000000000;
    eri4(0, 2, 3, 2) = eri4(0, 2, 3, 2) + 0.0012926692420310;
    eri4(0, 2, 3, 3) = eri4(0, 2, 3, 3) + 0.0016765852908689;
    eri4(0, 3, 0, 0) = eri4(0, 3, 0, 0) + 0.0001228030875960;
    eri4(0, 3, 0, 1) = eri4(0, 3, 0, 1) + 0.0000688934885519;
    eri4(0, 3, 0, 2) = eri4(0, 3, 0, 2) + 0.0000000000000000;
    eri4(0, 3, 0, 3) = eri4(0, 3, 0, 3) + 0.0000000000000000;
    eri4(0, 3, 1, 0) = eri4(0, 3, 1, 0) + 0.0000688934885519;
    eri4(0, 3, 1, 1) = eri4(0, 3, 1, 1) + 0.0001802793055773;
    eri4(0, 3, 1, 2) = eri4(0, 3, 1, 2) + 0.0000000000000000;
    eri4(0, 3, 1, 3) = eri4(0, 3, 1, 3) + 0.0000000000000000;
    eri4(0, 3, 2, 0) = eri4(0, 3, 2, 0) + 0.0000000000000000;
    eri4(0, 3, 2, 1) = eri4(0, 3, 2, 1) + 0.0000000000000000;
    eri4(0, 3, 2, 2) = eri4(0, 3, 2, 2) + 0.0001802793055773;
    eri4(0, 3, 2, 3) = eri4(0, 3, 2, 3) + 0.0000688934885519;
    eri4(0, 3, 3, 0) = eri4(0, 3, 3, 0) + 0.0000000000000000;
    eri4(0, 3, 3, 1) = eri4(0, 3, 3, 1) + 0.0000000000000000;
    eri4(0, 3, 3, 2) = eri4(0, 3, 3, 2) + 0.0000688934885519;
    eri4(0, 3, 3, 3) = eri4(0, 3, 3, 3) + 0.0001228030875960;
    eri4(1, 0, 0, 0) = eri4(1, 0, 0, 0) + 0.4445933369312846;
    eri4(1, 0, 0, 1) = eri4(1, 0, 0, 1) + 0.2975931246062183;
    eri4(1, 0, 0, 2) = eri4(1, 0, 0, 2) + 0.0018510224765508;
    eri4(1, 0, 0, 3) = eri4(1, 0, 0, 3) + 0.0000688934885519;
    eri4(1, 0, 1, 0) = eri4(1, 0, 1, 0) + 0.2975931246062183;
    eri4(1, 0, 1, 1) = eri4(1, 0, 1, 1) + 0.4445933369312846;
    eri4(1, 0, 1, 2) = eri4(1, 0, 1, 2) + 0.0080081059388164;
    eri4(1, 0, 1, 3) = eri4(1, 0, 1, 3) + 0.0012926692420310;
    eri4(1, 0, 2, 0) = eri4(1, 0, 2, 0) + 0.0018510224765508;
    eri4(1, 0, 2, 1) = eri4(1, 0, 2, 1) + 0.0080081059388164;
    eri4(1, 0, 2, 2) = eri4(1, 0, 2, 2) + 0.1161200862985245;
    eri4(1, 0, 2, 3) = eri4(1, 0, 2, 3) + 0.0683758445986394;
    eri4(1, 0, 3, 0) = eri4(1, 0, 3, 0) + 0.0000688934885519;
    eri4(1, 0, 3, 1) = eri4(1, 0, 3, 1) + 0.0012926692420310;
    eri4(1, 0, 3, 2) = eri4(1, 0, 3, 2) + 0.0683758445986394;
    eri4(1, 0, 3, 3) = eri4(1, 0, 3, 3) + 0.0931495514242861;
    eri4(1, 1, 0, 0) = eri4(1, 1, 0, 0) + 0.5699963425235068;
    eri4(1, 1, 0, 1) = eri4(1, 1, 0, 1) + 0.4445933369312844;
    eri4(1, 1, 0, 2) = eri4(1, 1, 0, 2) + 0.0033811957847676;
    eri4(1, 1, 0, 3) = eri4(1, 1, 0, 3) + 0.0001802793055773;
    eri4(1, 1, 1, 0) = eri4(1, 1, 1, 0) + 0.4445933369312845;
    eri4(1, 1, 1, 1) = eri4(1, 1, 1, 1) + 0.7746059442114875;
    eri4(1, 1, 1, 2) = eri4(1, 1, 1, 2) + 0.0147795694136651;
    eri4(1, 1, 1, 3) = eri4(1, 1, 1, 3) + 0.0023940339210324;
    eri4(1, 1, 2, 0) = eri4(1, 1, 2, 0) + 0.0033811957847676;
    eri4(1, 1, 2, 1) = eri4(1, 1, 2, 1) + 0.0147795694136651;
    eri4(1, 1, 2, 2) = eri4(1, 1, 2, 2) + 0.1999478928931304;
    eri4(1, 1, 2, 3) = eri4(1, 1, 2, 3) + 0.1161200862985245;
    eri4(1, 1, 3, 0) = eri4(1, 1, 3, 0) + 0.0001802793055773;
    eri4(1, 1, 3, 1) = eri4(1, 1, 3, 1) + 0.0023940339210324;
    eri4(1, 1, 3, 2) = eri4(1, 1, 3, 2) + 0.1161200862985245;
    eri4(1, 1, 3, 3) = eri4(1, 1, 3, 3) + 0.1562877998880217;
    eri4(1, 2, 0, 0) = eri4(1, 2, 0, 0) + 0.0100402760349429;
    eri4(1, 2, 0, 1) = eri4(1, 2, 0, 1) + 0.0080081059388164;
    eri4(1, 2, 0, 2) = eri4(1, 2, 0, 2) + 0.0000000000000000;
    eri4(1, 2, 0, 3) = eri4(1, 2, 0, 3) + 0.0000000000000000;
    eri4(1, 2, 1, 0) = eri4(1, 2, 1, 0) + 0.0080081059388164;
    eri4(1, 2, 1, 1) = eri4(1, 2, 1, 1) + 0.0147795694136651;
    eri4(1, 2, 1, 2) = eri4(1, 2, 1, 2) + 0.0000000000000000;
    eri4(1, 2, 1, 3) = eri4(1, 2, 1, 3) + 0.0000000000000000;
    eri4(1, 2, 2, 0) = eri4(1, 2, 2, 0) + 0.0000000000000000;
    eri4(1, 2, 2, 1) = eri4(1, 2, 2, 1) + 0.0000000000000000;
    eri4(1, 2, 2, 2) = eri4(1, 2, 2, 2) + 0.0147795694136651;
    eri4(1, 2, 2, 3) = eri4(1, 2, 2, 3) + 0.0080081059388164;
    eri4(1, 2, 3, 0) = eri4(1, 2, 3, 0) + 0.0000000000000000;
    eri4(1, 2, 3, 1) = eri4(1, 2, 3, 1) + 0.0000000000000000;
    eri4(1, 2, 3, 2) = eri4(1, 2, 3, 2) + 0.0080081059388164;
    eri4(1, 2, 3, 3) = eri4(1, 2, 3, 3) + 0.0100402760349429;
    eri4(1, 3, 0, 0) = eri4(1, 3, 0, 0) + 0.0016765852908689;
    eri4(1, 3, 0, 1) = eri4(1, 3, 0, 1) + 0.0012926692420310;
    eri4(1, 3, 0, 2) = eri4(1, 3, 0, 2) + 0.0000000000000000;
    eri4(1, 3, 0, 3) = eri4(1, 3, 0, 3) + 0.0000000000000000;
    eri4(1, 3, 1, 0) = eri4(1, 3, 1, 0) + 0.0012926692420310;
    eri4(1, 3, 1, 1) = eri4(1, 3, 1, 1) + 0.0023940339210324;
    eri4(1, 3, 1, 2) = eri4(1, 3, 1, 2) + 0.0000000000000000;
    eri4(1, 3, 1, 3) = eri4(1, 3, 1, 3) + 0.0000000000000000;
    eri4(1, 3, 2, 0) = eri4(1, 3, 2, 0) + 0.0000000000000000;
    eri4(1, 3, 2, 1) = eri4(1, 3, 2, 1) + 0.0000000000000000;
    eri4(1, 3, 2, 2) = eri4(1, 3, 2, 2) + 0.0033811957847676;
    eri4(1, 3, 2, 3) = eri4(1, 3, 2, 3) + 0.0018510224765508;
    eri4(1, 3, 3, 0) = eri4(1, 3, 3, 0) + 0.0000000000000000;
    eri4(1, 3, 3, 1) = eri4(1, 3, 3, 1) + 0.0000000000000000;
    eri4(1, 3, 3, 2) = eri4(1, 3, 3, 2) + 0.0018510224765508;
    eri4(1, 3, 3, 3) = eri4(1, 3, 3, 3) + 0.0023940339210324;
    eri4(2, 0, 0, 0) = eri4(2, 0, 0, 0) + 0.0023940339210324;
    eri4(2, 0, 0, 1) = eri4(2, 0, 0, 1) + 0.0018510224765508;
    eri4(2, 0, 0, 2) = eri4(2, 0, 0, 2) + 0.0000000000000000;
    eri4(2, 0, 0, 3) = eri4(2, 0, 0, 3) + 0.0000000000000000;
    eri4(2, 0, 1, 0) = eri4(2, 0, 1, 0) + 0.0018510224765508;
    eri4(2, 0, 1, 1) = eri4(2, 0, 1, 1) + 0.0033811957847676;
    eri4(2, 0, 1, 2) = eri4(2, 0, 1, 2) + 0.0000000000000000;
    eri4(2, 0, 1, 3) = eri4(2, 0, 1, 3) + 0.0000000000000000;
    eri4(2, 0, 2, 0) = eri4(2, 0, 2, 0) + 0.0000000000000000;
    eri4(2, 0, 2, 1) = eri4(2, 0, 2, 1) + 0.0000000000000000;
    eri4(2, 0, 2, 2) = eri4(2, 0, 2, 2) + 0.0023940339210324;
    eri4(2, 0, 2, 3) = eri4(2, 0, 2, 3) + 0.0012926692420310;
    eri4(2, 0, 3, 0) = eri4(2, 0, 3, 0) + 0.0000000000000000;
    eri4(2, 0, 3, 1) = eri4(2, 0, 3, 1) + 0.0000000000000000;
    eri4(2, 0, 3, 2) = eri4(2, 0, 3, 2) + 0.0012926692420310;
    eri4(2, 0, 3, 3) = eri4(2, 0, 3, 3) + 0.0016765852908689;
    eri4(2, 1, 0, 0) = eri4(2, 1, 0, 0) + 0.0100402760349429;
    eri4(2, 1, 0, 1) = eri4(2, 1, 0, 1) + 0.0080081059388164;
    eri4(2, 1, 0, 2) = eri4(2, 1, 0, 2) + 0.0000000000000000;
    eri4(2, 1, 0, 3) = eri4(2, 1, 0, 3) + 0.0000000000000000;
    eri4(2, 1, 1, 0) = eri4(2, 1, 1, 0) + 0.0080081059388164;
    eri4(2, 1, 1, 1) = eri4(2, 1, 1, 1) + 0.0147795694136651;
    eri4(2, 1, 1, 2) = eri4(2, 1, 1, 2) + 0.0000000000000000;
    eri4(2, 1, 1, 3) = eri4(2, 1, 1, 3) + 0.0000000000000000;
    eri4(2, 1, 2, 0) = eri4(2, 1, 2, 0) + 0.0000000000000000;
    eri4(2, 1, 2, 1) = eri4(2, 1, 2, 1) + 0.0000000000000000;
    eri4(2, 1, 2, 2) = eri4(2, 1, 2, 2) + 0.0147795694136651;
    eri4(2, 1, 2, 3) = eri4(2, 1, 2, 3) + 0.0080081059388164;
    eri4(2, 1, 3, 0) = eri4(2, 1, 3, 0) + 0.0000000000000000;
    eri4(2, 1, 3, 1) = eri4(2, 1, 3, 1) + 0.0000000000000000;
    eri4(2, 1, 3, 2) = eri4(2, 1, 3, 2) + 0.0080081059388164;
    eri4(2, 1, 3, 3) = eri4(2, 1, 3, 3) + 0.0100402760349429;
    eri4(2, 2, 0, 0) = eri4(2, 2, 0, 0) + 0.1562877998880217;
    eri4(2, 2, 0, 1) = eri4(2, 2, 0, 1) + 0.1161200862985245;
    eri4(2, 2, 0, 2) = eri4(2, 2, 0, 2) + 0.0023940339210324;
    eri4(2, 2, 0, 3) = eri4(2, 2, 0, 3) + 0.0001802793055773;
    eri4(2, 2, 1, 0) = eri4(2, 2, 1, 0) + 0.1161200862985245;
    eri4(2, 2, 1, 1) = eri4(2, 2, 1, 1) + 0.1999478928931304;
    eri4(2, 2, 1, 2) = eri4(2, 2, 1, 2) + 0.0147795694136651;
    eri4(2, 2, 1, 3) = eri4(2, 2, 1, 3) + 0.0033811957847676;
    eri4(2, 2, 2, 0) = eri4(2, 2, 2, 0) + 0.0023940339210324;
    eri4(2, 2, 2, 1) = eri4(2, 2, 2, 1) + 0.0147795694136651;
    eri4(2, 2, 2, 2) = eri4(2, 2, 2, 2) + 0.7746059442114875;
    eri4(2, 2, 2, 3) = eri4(2, 2, 2, 3) + 0.4445933369312845;
    eri4(2, 2, 3, 0) = eri4(2, 2, 3, 0) + 0.0001802793055773;
    eri4(2, 2, 3, 1) = eri4(2, 2, 3, 1) + 0.0033811957847676;
    eri4(2, 2, 3, 2) = eri4(2, 2, 3, 2) + 0.4445933369312845;
    eri4(2, 2, 3, 3) = eri4(2, 2, 3, 3) + 0.5699963425235068;
    eri4(2, 3, 0, 0) = eri4(2, 3, 0, 0) + 0.0931495514242861;
    eri4(2, 3, 0, 1) = eri4(2, 3, 0, 1) + 0.0683758445986394;
    eri4(2, 3, 0, 2) = eri4(2, 3, 0, 2) + 0.0012926692420310;
    eri4(2, 3, 0, 3) = eri4(2, 3, 0, 3) + 0.0000688934885519;
    eri4(2, 3, 1, 0) = eri4(2, 3, 1, 0) + 0.0683758445986394;
    eri4(2, 3, 1, 1) = eri4(2, 3, 1, 1) + 0.1161200862985245;
    eri4(2, 3, 1, 2) = eri4(2, 3, 1, 2) + 0.0080081059388164;
    eri4(2, 3, 1, 3) = eri4(2, 3, 1, 3) + 0.0018510224765508;
    eri4(2, 3, 2, 0) = eri4(2, 3, 2, 0) + 0.0012926692420310;
    eri4(2, 3, 2, 1) = eri4(2, 3, 2, 1) + 0.0080081059388164;
    eri4(2, 3, 2, 2) = eri4(2, 3, 2, 2) + 0.4445933369312846;
    eri4(2, 3, 2, 3) = eri4(2, 3, 2, 3) + 0.2975931246062183;
    eri4(2, 3, 3, 0) = eri4(2, 3, 3, 0) + 0.0000688934885519;
    eri4(2, 3, 3, 1) = eri4(2, 3, 3, 1) + 0.0018510224765508;
    eri4(2, 3, 3, 2) = eri4(2, 3, 3, 2) + 0.2975931246062183;
    eri4(2, 3, 3, 3) = eri4(2, 3, 3, 3) + 0.4445933369312846;
    eri4(3, 0, 0, 0) = eri4(3, 0, 0, 0) + 0.0001228030875960;
    eri4(3, 0, 0, 1) = eri4(3, 0, 0, 1) + 0.0000688934885519;
    eri4(3, 0, 0, 2) = eri4(3, 0, 0, 2) + 0.0000000000000000;
    eri4(3, 0, 0, 3) = eri4(3, 0, 0, 3) + 0.0000000000000000;
    eri4(3, 0, 1, 0) = eri4(3, 0, 1, 0) + 0.0000688934885519;
    eri4(3, 0, 1, 1) = eri4(3, 0, 1, 1) + 0.0001802793055773;
    eri4(3, 0, 1, 2) = eri4(3, 0, 1, 2) + 0.0000000000000000;
    eri4(3, 0, 1, 3) = eri4(3, 0, 1, 3) + 0.0000000000000000;
    eri4(3, 0, 2, 0) = eri4(3, 0, 2, 0) + 0.0000000000000000;
    eri4(3, 0, 2, 1) = eri4(3, 0, 2, 1) + 0.0000000000000000;
    eri4(3, 0, 2, 2) = eri4(3, 0, 2, 2) + 0.0001802793055773;
    eri4(3, 0, 2, 3) = eri4(3, 0, 2, 3) + 0.0000688934885519;
    eri4(3, 0, 3, 0) = eri4(3, 0, 3, 0) + 0.0000000000000000;
    eri4(3, 0, 3, 1) = eri4(3, 0, 3, 1) + 0.0000000000000000;
    eri4(3, 0, 3, 2) = eri4(3, 0, 3, 2) + 0.0000688934885519;
    eri4(3, 0, 3, 3) = eri4(3, 0, 3, 3) + 0.0001228030875960;
    eri4(3, 1, 0, 0) = eri4(3, 1, 0, 0) + 0.0016765852908689;
    eri4(3, 1, 0, 1) = eri4(3, 1, 0, 1) + 0.0012926692420310;
    eri4(3, 1, 0, 2) = eri4(3, 1, 0, 2) + 0.0000000000000000;
    eri4(3, 1, 0, 3) = eri4(3, 1, 0, 3) + 0.0000000000000000;
    eri4(3, 1, 1, 0) = eri4(3, 1, 1, 0) + 0.0012926692420310;
    eri4(3, 1, 1, 1) = eri4(3, 1, 1, 1) + 0.0023940339210324;
    eri4(3, 1, 1, 2) = eri4(3, 1, 1, 2) + 0.0000000000000000;
    eri4(3, 1, 1, 3) = eri4(3, 1, 1, 3) + 0.0000000000000000;
    eri4(3, 1, 2, 0) = eri4(3, 1, 2, 0) + 0.0000000000000000;
    eri4(3, 1, 2, 1) = eri4(3, 1, 2, 1) + 0.0000000000000000;
    eri4(3, 1, 2, 2) = eri4(3, 1, 2, 2) + 0.0033811957847676;
    eri4(3, 1, 2, 3) = eri4(3, 1, 2, 3) + 0.0018510224765508;
    eri4(3, 1, 3, 0) = eri4(3, 1, 3, 0) + 0.0000000000000000;
    eri4(3, 1, 3, 1) = eri4(3, 1, 3, 1) + 0.0000000000000000;
    eri4(3, 1, 3, 2) = eri4(3, 1, 3, 2) + 0.0018510224765508;
    eri4(3, 1, 3, 3) = eri4(3, 1, 3, 3) + 0.0023940339210324;
    eri4(3, 2, 0, 0) = eri4(3, 2, 0, 0) + 0.0931495514242861;
    eri4(3, 2, 0, 1) = eri4(3, 2, 0, 1) + 0.0683758445986394;
    eri4(3, 2, 0, 2) = eri4(3, 2, 0, 2) + 0.0012926692420310;
    eri4(3, 2, 0, 3) = eri4(3, 2, 0, 3) + 0.0000688934885519;
    eri4(3, 2, 1, 0) = eri4(3, 2, 1, 0) + 0.0683758445986394;
    eri4(3, 2, 1, 1) = eri4(3, 2, 1, 1) + 0.1161200862985245;
    eri4(3, 2, 1, 2) = eri4(3, 2, 1, 2) + 0.0080081059388164;
    eri4(3, 2, 1, 3) = eri4(3, 2, 1, 3) + 0.0018510224765508;
    eri4(3, 2, 2, 0) = eri4(3, 2, 2, 0) + 0.0012926692420310;
    eri4(3, 2, 2, 1) = eri4(3, 2, 2, 1) + 0.0080081059388164;
    eri4(3, 2, 2, 2) = eri4(3, 2, 2, 2) + 0.4445933369312848;
    eri4(3, 2, 2, 3) = eri4(3, 2, 2, 3) + 0.2975931246062183;
    eri4(3, 2, 3, 0) = eri4(3, 2, 3, 0) + 0.0000688934885519;
    eri4(3, 2, 3, 1) = eri4(3, 2, 3, 1) + 0.0018510224765508;
    eri4(3, 2, 3, 2) = eri4(3, 2, 3, 2) + 0.2975931246062183;
    eri4(3, 2, 3, 3) = eri4(3, 2, 3, 3) + 0.4445933369312846;
    eri4(3, 3, 0, 0) = eri4(3, 3, 0, 0) + 0.1282580446942662;
    eri4(3, 3, 0, 1) = eri4(3, 3, 0, 1) + 0.0931495514242861;
    eri4(3, 3, 0, 2) = eri4(3, 3, 0, 2) + 0.0016765852908689;
    eri4(3, 3, 0, 3) = eri4(3, 3, 0, 3) + 0.0001228030875960;
    eri4(3, 3, 1, 0) = eri4(3, 3, 1, 0) + 0.0931495514242861;
    eri4(3, 3, 1, 1) = eri4(3, 3, 1, 1) + 0.1562877998880217;
    eri4(3, 3, 1, 2) = eri4(3, 3, 1, 2) + 0.0100402760349429;
    eri4(3, 3, 1, 3) = eri4(3, 3, 1, 3) + 0.0023940339210324;
    eri4(3, 3, 2, 0) = eri4(3, 3, 2, 0) + 0.0016765852908689;
    eri4(3, 3, 2, 1) = eri4(3, 3, 2, 1) + 0.0100402760349429;
    eri4(3, 3, 2, 2) = eri4(3, 3, 2, 2) + 0.5699963425235068;
    eri4(3, 3, 2, 3) = eri4(3, 3, 2, 3) + 0.4445933369312844;
    eri4(3, 3, 3, 0) = eri4(3, 3, 3, 0) + 0.0001228030875960;
    eri4(3, 3, 3, 1) = eri4(3, 3, 3, 1) + 0.0023940339210324;
    eri4(3, 3, 3, 2) = eri4(3, 3, 3, 2) + 0.4445933369312845;
    eri4(3, 3, 3, 3) = eri4(3, 3, 3, 3) + 0.7746059442114875;
    return eri4;
}
} // namespace h2_dimer_6

TEST_CASE("Model SCF - H2 Dimer - 10e-6") {
    // Set Integral Values
    auto s          = h2_dimer_6::get_s();
    auto t          = h2_dimer_6::get_t();
    auto v          = h2_dimer_6::get_v();
    auto eri4       = h2_dimer_6::get_eri4();
    matrix_t H_core = t + v;

    // Nuclear repulsion energy
    value_t e_nuc = 2.0710528860073;

    // Some containers
    eig_mat_t c_occ(4, 2);
    matrix_t p(4, 4);

    // SCF Parameters
    int max_iter = 4;

    // Form Initial Guess
    map_t s_map(s.data(), 4, 4);
    map_t h_core_map(H_core.data(), 4, 4);
    Eigen::GeneralizedSelfAdjointEigenSolver<eig_mat_t> ges(h_core_map, s_map);

    c_occ(0, 0) = ges.eigenvectors()(0, 0);
    c_occ(0, 1) = ges.eigenvectors()(0, 1);
    c_occ(1, 0) = ges.eigenvectors()(1, 0);
    c_occ(1, 1) = ges.eigenvectors()(1, 1);
    c_occ(2, 0) = ges.eigenvectors()(2, 0);
    c_occ(2, 1) = ges.eigenvectors()(2, 1);
    c_occ(3, 0) = ges.eigenvectors()(3, 0);
    c_occ(3, 1) = ges.eigenvectors()(3, 1);

    eig_mat_t density = c_occ * c_occ.transpose();

    p(0, 0) = density(0, 0);
    p(0, 1) = density(0, 1);
    p(0, 2) = density(0, 2);
    p(0, 3) = density(0, 3);
    p(1, 0) = density(1, 0);
    p(1, 1) = density(1, 1);
    p(1, 2) = density(1, 2);
    p(1, 3) = density(1, 3);
    p(2, 0) = density(2, 0);
    p(2, 1) = density(2, 1);
    p(2, 2) = density(2, 2);
    p(2, 3) = density(2, 3);
    p(3, 0) = density(3, 0);
    p(3, 1) = density(3, 1);
    p(3, 2) = density(3, 2);
    p(3, 3) = density(3, 3);

    std::cout << "H2 Dimer - 10e-6" << std::endl;
    SECTION("Maintain error sources") {
        std::cout << "Maintain error sources" << std::endl;
        for(auto i = 0; i < max_iter; ++i) {
            std::cout << std::setprecision(16);
            std::cout << "Iteration " << i << std::endl;

            Eigen::array<index_t, 2> j_modes{index_t(2, 0), index_t(3, 1)};
            Eigen::array<index_t, 2> k_modes{index_t(1, 0), index_t(2, 1)};

            // reuse integrals
            matrix_t J = eri4.contract(p, j_modes);
            matrix_t K = eri4.contract(p, k_modes);
            matrix_t F = H_core + 2 * J - K;

            // Compute Energy
            matrix_t H = H_core + F;
            Eigen::array<index_t, 2> e_modes{index_t(0, 0), index_t(1, 1)};
            scalar_t e         = H.contract(p, e_modes);
            uncertain_t e_elec = e();
            std::cout << "Total Energy   = " << e_elec + e_nuc << std::endl;
            std::cout << "# Error Sources= " << e_elec.deps().size()
                      << std::endl;
            // for(const auto& [dep, deriv] : e_elec.deps()) {
            //     std::cout << dep.get() << " = " << deriv << std::endl;
            // }

            map_t F_map(F.data(), 4, 4);
            Eigen::GeneralizedSelfAdjointEigenSolver<eig_mat_t> es(F_map,
                                                                   s_map);
            eig_mat_t occ(4, 2);
            occ(0, 0)   = es.eigenvectors()(0, 0);
            occ(0, 1)   = es.eigenvectors()(0, 1);
            occ(1, 0)   = es.eigenvectors()(1, 0);
            occ(1, 1)   = es.eigenvectors()(1, 1);
            occ(2, 0)   = es.eigenvectors()(2, 0);
            occ(2, 1)   = es.eigenvectors()(2, 1);
            occ(3, 0)   = es.eigenvectors()(3, 0);
            occ(3, 1)   = es.eigenvectors()(3, 1);
            eig_mat_t d = occ * occ.transpose();

            p(0, 0) = d(0, 0);
            p(0, 1) = d(0, 1);
            p(0, 2) = d(0, 2);
            p(0, 3) = d(0, 3);
            p(1, 0) = d(1, 0);
            p(1, 1) = d(1, 1);
            p(1, 2) = d(1, 2);
            p(1, 3) = d(1, 3);
            p(2, 0) = d(2, 0);
            p(2, 1) = d(2, 1);
            p(2, 2) = d(2, 2);
            p(2, 3) = d(2, 3);
            p(3, 0) = d(3, 0);
            p(3, 1) = d(3, 1);
            p(3, 2) = d(3, 2);
            p(3, 3) = d(3, 3);
        }
    }

    SECTION("New error sources") {
        std::cout << "New error sources" << std::endl;
        for(auto i = 0; i < max_iter; ++i) {
            std::cout << std::setprecision(16);
            std::cout << "Iteration " << i << std::endl;

            Eigen::array<index_t, 2> j_modes{index_t(2, 0), index_t(3, 1)};
            Eigen::array<index_t, 2> k_modes{index_t(1, 0), index_t(2, 1)};

            // get new instances
            matrix_t J = h2_dimer_6::get_eri4().contract(p, j_modes);
            matrix_t K = h2_dimer_6::get_eri4().contract(p, k_modes);
            matrix_t F = h2_dimer_6::get_t() + h2_dimer_6::get_v() + 2 * J - K;

            // Compute Energy
            matrix_t H = h2_dimer_6::get_t() + h2_dimer_6::get_v() + F;
            Eigen::array<index_t, 2> e_modes{index_t(0, 0), index_t(1, 1)};
            scalar_t e         = H.contract(p, e_modes);
            uncertain_t e_elec = e();
            std::cout << "Total Energy   = " << e_elec + e_nuc << std::endl;
            std::cout << "# Error Sources= " << e_elec.deps().size()
                      << std::endl;
            // for(const auto& [dep, deriv] : e_elec.deps()) {
            //     std::cout << dep.get() << " = " << deriv << std::endl;
            // }

            map_t F_map(F.data(), 4, 4);
            auto s_again = h2_dimer_6::get_s();
            map_t s_again_map(s_again.data(), 4, 4);
            Eigen::GeneralizedSelfAdjointEigenSolver<eig_mat_t> es(F_map,
                                                                   s_again_map);
            eig_mat_t occ(4, 2);
            occ(0, 0)   = es.eigenvectors()(0, 0);
            occ(0, 1)   = es.eigenvectors()(0, 1);
            occ(1, 0)   = es.eigenvectors()(1, 0);
            occ(1, 1)   = es.eigenvectors()(1, 1);
            occ(2, 0)   = es.eigenvectors()(2, 0);
            occ(2, 1)   = es.eigenvectors()(2, 1);
            occ(3, 0)   = es.eigenvectors()(3, 0);
            occ(3, 1)   = es.eigenvectors()(3, 1);
            eig_mat_t d = occ * occ.transpose();

            p(0, 0) = d(0, 0);
            p(0, 1) = d(0, 1);
            p(0, 2) = d(0, 2);
            p(0, 3) = d(0, 3);
            p(1, 0) = d(1, 0);
            p(1, 1) = d(1, 1);
            p(1, 2) = d(1, 2);
            p(1, 3) = d(1, 3);
            p(2, 0) = d(2, 0);
            p(2, 1) = d(2, 1);
            p(2, 2) = d(2, 2);
            p(2, 3) = d(2, 3);
            p(3, 0) = d(3, 0);
            p(3, 1) = d(3, 1);
            p(3, 2) = d(3, 2);
            p(3, 3) = d(3, 3);
        }
    }
}

#endif // ENABLE_EIGEN_SUPPORT
