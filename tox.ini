[tox]
# Minimum tox version
requires =
    tox>=4.2
# Default environment(s) to run
envlist = test
# No need for the packaging action; we aren't building Python packages
no_package = True


# Parent of other environments. If a variable present here is not set
# in "testenv:<env>" it will default to the value here. These values are
# overwritten, NOT appended, to values defined in a sub-environment.
[testenv]
skip_install = True
setenv =
    TOXINIDIR = {toxinidir}
    BUILDDIR = {env:BUILDDIR:build}
    INSTALLDIR = {env:INSTALLDIR:install}
passenv =
    HOME
allowlist_externals =
    cmake  # software build
    ctest  # running tests
    rm     # cleanup
    echo


[testenv:configure]
description =
    configure: Configure the build with CMake
commands =
    cmake -S {toxinidir} -B {env:BUILDDIR} -DCMAKE_INSTALL_PREFIX={env:INSTALLDIR} {posargs}


[testenv:{build,buildonly}]
description =
    build: Configure and build the package with CMake
    buildonly: Only build an already configured package with CMake
commands =
    build: {[testenv:configure]commands}
    cmake --build {env:BUILDDIR} {posargs:--parallel}


[testenv:{test,testonly}]
description =
    test: Configure and build the package with CMake, then test the package with CTest
    testonly: Only test an already built package with CMake
commands =
    test: {[testenv:configure]commands} -DBUILD_TESTING=ON
    test: {[testenv:buildonly]commands}
    ctest --test-dir {env:BUILDDIR} {posargs}


[testenv:{install,installonly}]
description =
    install: Configure, build, and install the package with CMake
    installonly: Only install an already built package with CMake
commands =
    install: {[testenv:configure]commands}
    install: {[testenv:buildonly]commands}
    cmake --install {env:BUILDDIR} {posargs}


[testenv:clean]
description =
    clean: Remove old build and install files with rm
commands =
    rm -rf "{env:BUILDDIR}" "{env:INSTALLDIR}"

[testenv:{docs,viewdocs}]
description =
    onlydocs: Clear the current build and only build the documentation
    docs: Configure and build the documentation with CMake and Doxygen
    viewdocs: Starts a local server hosting built documentation with 'python -m http.server'
passenv =
    SETUPTOOLS_*
setenv =
    {[testenv]setenv}
    viewdocs: PORT = 3000
commands =
    {[testenv:configure]commands} -DONLY_BUILD_DOCS=ON
    {[testenv:buildonly]commands} --target sigma_cxx_api
    viewdocs: python -m http.server {env:PORT} --directory "{env:BUILDDIR}/html"

# To run `tox -e lint` you need to make sure you have a
# `.pre-commit-config.yaml` file. See https://pre-commit.com
[testenv:lint]
description = Perform static analysis and style checks
skip_install = True
deps = pre-commit
passenv =
    HOMEPATH
    PROGRAMDATA
    SETUPTOOLS_*
commands =
    pre-commit run --all-files  # {posargs:--show-diff-on-failure}


; [testenv:{docformat}]
; description =
;     docformat: Invoke docstrfmt to format the documentation
; passenv =
;     SETUPTOOLS_*
; setenv =
;     DOCSDIR = {toxinidir}/docs
;     PYPROJECT = {toxinidir}/pyproject.toml
; deps =
;     docstrfmt
; commands =
;     docformat: docstrfmt "{toxinidir}/README.rst" --pyproject-config {env:PYPROJECT} {posargs}
;     docformat: docstrfmt "{env:DOCSDIR}/source" --pyproject-config {env:PYPROJECT} -e docs/source/api {posargs}

; [testenv:publish]
; description =
;     Publish the package you have been developing to a package index server.
;     By default, it uses testpypi. If you really want to publish your package
;     to be publicly accessible in PyPI, use the `-- --repository pypi` option.
; skip_install = True
; changedir = {toxinidir}
; passenv =
;     # See: https://twine.readthedocs.io/en/latest/
;     TWINE_USERNAME
;     TWINE_PASSWORD
;     TWINE_REPOSITORY
;     TWINE_REPOSITORY_URL
; deps = twine
; commands =
;     python -m twine check dist/*
;     python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
